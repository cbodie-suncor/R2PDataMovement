// Licence file C:\Users\localadmin\Documents\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query.Internal;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace R2PTransformation.src.db
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IMyDbContext : IDisposable
    {
        DbSet<Batch> Batches { get; set; } // Batch
        DbSet<Conversion> Conversions { get; set; } // Conversion
        DbSet<CustodyTicket> CustodyTickets { get; set; } // CustodyTicket
        DbSet<MaterialMovement> MaterialMovements { get; set; } // MaterialMovement
        DbSet<SourceUnitMap> SourceUnitMaps { get; set; } // SourceUnitMap
        DbSet<StandardUnit> StandardUnits { get; set; } // StandardUnit
        DbSet<TagBalance> TagBalances { get; set; } // TagBalance
        DbSet<TagMap> TagMaps { get; set; } // TagMap
        DbSet<TransactionEvent> TransactionEvents { get; set; } // TransactionEvent
        DbSet<TransactionEventDetail> TransactionEventDetails { get; set; } // TransactionEventDetail

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        int EmptyR2PForTest();
        // EmptyR2PForTestAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpAlterdiagram(string diagramname, int? ownerId, int? version, byte[] definition);
        // SpAlterdiagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpCreatediagram(string diagramname, int? ownerId, int? version, byte[] definition);
        // SpCreatediagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpDropdiagram(string diagramname, int? ownerId);
        // SpDropdiagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpHelpdiagramdefinitionReturnModel> SpHelpdiagramdefinition(string diagramname, int? ownerId);
        List<SpHelpdiagramdefinitionReturnModel> SpHelpdiagramdefinition(string diagramname, int? ownerId, out int procResult);
        Task<List<SpHelpdiagramdefinitionReturnModel>> SpHelpdiagramdefinitionAsync(string diagramname, int? ownerId);

        List<SpHelpdiagramsReturnModel> SpHelpdiagrams(string diagramname, int? ownerId);
        List<SpHelpdiagramsReturnModel> SpHelpdiagrams(string diagramname, int? ownerId, out int procResult);
        Task<List<SpHelpdiagramsReturnModel>> SpHelpdiagramsAsync(string diagramname, int? ownerId);

        int SpRenamediagram(string diagramname, int? ownerId, string newDiagramname);
        // SpRenamediagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpUpgraddiagrams();
        // SpUpgraddiagramsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class MyDbContext : DbContext, IMyDbContext
    {
        public MyDbContext()
        {
        }

        public MyDbContext(DbContextOptions<MyDbContext> options)
            : base(options)
        {
        }

        public DbSet<Batch> Batches { get; set; } // Batch
        public DbSet<Conversion> Conversions { get; set; } // Conversion
        public DbSet<CustodyTicket> CustodyTickets { get; set; } // CustodyTicket
        public DbSet<MaterialMovement> MaterialMovements { get; set; } // MaterialMovement
        public DbSet<SourceUnitMap> SourceUnitMaps { get; set; } // SourceUnitMap
        public DbSet<StandardUnit> StandardUnits { get; set; } // StandardUnit
        public DbSet<TagBalance> TagBalances { get; set; } // TagBalance
        public DbSet<TagMap> TagMaps { get; set; } // TagMap
        public DbSet<TransactionEvent> TransactionEvents { get; set; } // TransactionEvent
        public DbSet<TransactionEventDetail> TransactionEventDetails { get; set; } // TransactionEventDetail

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Data Source=inmdevarmsvruw2001.database.windows.net;Initial Catalog=inmdevarmsqluw2001;User ID=suncorsqladmin;password=AdvancedAnalytics2020");
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new BatchConfiguration());
            modelBuilder.ApplyConfiguration(new ConversionConfiguration());
            modelBuilder.ApplyConfiguration(new CustodyTicketConfiguration());
            modelBuilder.ApplyConfiguration(new MaterialMovementConfiguration());
            modelBuilder.ApplyConfiguration(new SourceUnitMapConfiguration());
            modelBuilder.ApplyConfiguration(new StandardUnitConfiguration());
            modelBuilder.ApplyConfiguration(new TagBalanceConfiguration());
            modelBuilder.ApplyConfiguration(new TagMapConfiguration());
            modelBuilder.ApplyConfiguration(new TransactionEventConfiguration());
            modelBuilder.ApplyConfiguration(new TransactionEventDetailConfiguration());

            modelBuilder.Entity<SpHelpdiagramdefinitionReturnModel>().HasNoKey();
            modelBuilder.Entity<SpHelpdiagramsReturnModel>().HasNoKey();
        }


        // Stored Procedures
        public int EmptyR2PForTest()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[EmptyR2PForTest] ", procResultParam);

            return (int)procResultParam.Value;
        }

        // EmptyR2PForTestAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpAlterdiagram(string diagramname, int? ownerId, int? version, byte[] definition)
        {
            var diagramnameParam = new SqlParameter { ParameterName = "@diagramname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = DBNull.Value;

            var ownerIdParam = new SqlParameter { ParameterName = "@owner_id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = DBNull.Value;

            var versionParam = new SqlParameter { ParameterName = "@version", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = version.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!version.HasValue)
                versionParam.Value = DBNull.Value;

            var definitionParam = new SqlParameter { ParameterName = "@definition", SqlDbType = SqlDbType.VarBinary, Direction = ParameterDirection.Input, Value = definition, Size = -1 };
            if (definitionParam.Value == null)
                definitionParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_alterdiagram] @diagramname, @owner_id, @version, @definition", diagramnameParam, ownerIdParam, versionParam, definitionParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpAlterdiagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpCreatediagram(string diagramname, int? ownerId, int? version, byte[] definition)
        {
            var diagramnameParam = new SqlParameter { ParameterName = "@diagramname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = DBNull.Value;

            var ownerIdParam = new SqlParameter { ParameterName = "@owner_id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = DBNull.Value;

            var versionParam = new SqlParameter { ParameterName = "@version", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = version.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!version.HasValue)
                versionParam.Value = DBNull.Value;

            var definitionParam = new SqlParameter { ParameterName = "@definition", SqlDbType = SqlDbType.VarBinary, Direction = ParameterDirection.Input, Value = definition, Size = -1 };
            if (definitionParam.Value == null)
                definitionParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_creatediagram] @diagramname, @owner_id, @version, @definition", diagramnameParam, ownerIdParam, versionParam, definitionParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpCreatediagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpDropdiagram(string diagramname, int? ownerId)
        {
            var diagramnameParam = new SqlParameter { ParameterName = "@diagramname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = DBNull.Value;

            var ownerIdParam = new SqlParameter { ParameterName = "@owner_id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_dropdiagram] @diagramname, @owner_id", diagramnameParam, ownerIdParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpDropdiagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpHelpdiagramdefinitionReturnModel> SpHelpdiagramdefinition(string diagramname, int? ownerId)
        {
            int procResult;
            return SpHelpdiagramdefinition(diagramname, ownerId, out procResult);
        }

        public List<SpHelpdiagramdefinitionReturnModel> SpHelpdiagramdefinition(string diagramname, int? ownerId, out int procResult)
        {
            var diagramnameParam = new SqlParameter { ParameterName = "@diagramname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = DBNull.Value;

            var ownerIdParam = new SqlParameter { ParameterName = "@owner_id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_helpdiagramdefinition] @diagramname, @owner_id";
            var procResultData = Set<SpHelpdiagramdefinitionReturnModel>()
                .FromSqlRaw(sqlCommand, diagramnameParam, ownerIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpHelpdiagramdefinitionReturnModel>> SpHelpdiagramdefinitionAsync(string diagramname, int? ownerId)
        {
            var diagramnameParam = new SqlParameter { ParameterName = "@diagramname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = DBNull.Value;

            var ownerIdParam = new SqlParameter { ParameterName = "@owner_id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_helpdiagramdefinition] @diagramname, @owner_id";
            var procResultData = await Set<SpHelpdiagramdefinitionReturnModel>()
                .FromSqlRaw(sqlCommand, diagramnameParam, ownerIdParam)
                .ToListAsync();

            return procResultData;
        }

        public List<SpHelpdiagramsReturnModel> SpHelpdiagrams(string diagramname, int? ownerId)
        {
            int procResult;
            return SpHelpdiagrams(diagramname, ownerId, out procResult);
        }

        public List<SpHelpdiagramsReturnModel> SpHelpdiagrams(string diagramname, int? ownerId, out int procResult)
        {
            var diagramnameParam = new SqlParameter { ParameterName = "@diagramname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = DBNull.Value;

            var ownerIdParam = new SqlParameter { ParameterName = "@owner_id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            const string sqlCommand = "EXEC @procResult = [dbo].[sp_helpdiagrams] @diagramname, @owner_id";
            var procResultData = Set<SpHelpdiagramsReturnModel>()
                .FromSqlRaw(sqlCommand, diagramnameParam, ownerIdParam, procResultParam)
                .ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpHelpdiagramsReturnModel>> SpHelpdiagramsAsync(string diagramname, int? ownerId)
        {
            var diagramnameParam = new SqlParameter { ParameterName = "@diagramname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = DBNull.Value;

            var ownerIdParam = new SqlParameter { ParameterName = "@owner_id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = DBNull.Value;

            const string sqlCommand = "EXEC [dbo].[sp_helpdiagrams] @diagramname, @owner_id";
            var procResultData = await Set<SpHelpdiagramsReturnModel>()
                .FromSqlRaw(sqlCommand, diagramnameParam, ownerIdParam)
                .ToListAsync();

            return procResultData;
        }

        public int SpRenamediagram(string diagramname, int? ownerId, string newDiagramname)
        {
            var diagramnameParam = new SqlParameter { ParameterName = "@diagramname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = DBNull.Value;

            var ownerIdParam = new SqlParameter { ParameterName = "@owner_id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = DBNull.Value;

            var newDiagramnameParam = new SqlParameter { ParameterName = "@new_diagramname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = newDiagramname, Size = 128 };
            if (newDiagramnameParam.Value == null)
                newDiagramnameParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_renamediagram] @diagramname, @owner_id, @new_diagramname", diagramnameParam, ownerIdParam, newDiagramnameParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpRenamediagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpUpgraddiagrams()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[sp_upgraddiagrams] ", procResultParam);

            return (int)procResultParam.Value;
        }

        // SpUpgraddiagramsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context factory

    public class MyDbContextFactory : IDesignTimeDbContextFactory<MyDbContext>
    {
        public MyDbContext CreateDbContext(string[] args)
        {
            return new MyDbContext();
        }
    }

    #endregion

    #region Fake Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeMyDbContext : IMyDbContext
    {
        public DbSet<Batch> Batches { get; set; } // Batch
        public DbSet<Conversion> Conversions { get; set; } // Conversion
        public DbSet<CustodyTicket> CustodyTickets { get; set; } // CustodyTicket
        public DbSet<MaterialMovement> MaterialMovements { get; set; } // MaterialMovement
        public DbSet<SourceUnitMap> SourceUnitMaps { get; set; } // SourceUnitMap
        public DbSet<StandardUnit> StandardUnits { get; set; } // StandardUnit
        public DbSet<TagBalance> TagBalances { get; set; } // TagBalance
        public DbSet<TagMap> TagMaps { get; set; } // TagMap
        public DbSet<TransactionEvent> TransactionEvents { get; set; } // TransactionEvent
        public DbSet<TransactionEventDetail> TransactionEventDetails { get; set; } // TransactionEventDetail

        public FakeMyDbContext()
        {
            _database = null;

            Batches = new FakeDbSet<Batch>("Id");
            Conversions = new FakeDbSet<Conversion>("StandardUnit", "ToUnit");
            CustodyTickets = new FakeDbSet<CustodyTicket>("CustodyTicketId");
            MaterialMovements = new FakeDbSet<MaterialMovement>("MaterialMovementId");
            SourceUnitMaps = new FakeDbSet<SourceUnitMap>("Source", "SourceUnit");
            StandardUnits = new FakeDbSet<StandardUnit>("Name");
            TagBalances = new FakeDbSet<TagBalance>("Tag", "BalanceDate");
            TagMaps = new FakeDbSet<TagMap>("Tag", "Plant");
            TransactionEvents = new FakeDbSet<TransactionEvent>("TransactionEventId");
            TransactionEventDetails = new FakeDbSet<TransactionEventDetail>("TransactionEventDetailId");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        // Stored Procedures

        public int EmptyR2PForTest()
        {
            return 0;
        }

        // EmptyR2PForTestAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpAlterdiagram(string diagramname, int? ownerId, int? version, byte[] definition)
        {
            return 0;
        }

        // SpAlterdiagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpCreatediagram(string diagramname, int? ownerId, int? version, byte[] definition)
        {
            return 0;
        }

        // SpCreatediagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpDropdiagram(string diagramname, int? ownerId)
        {
            return 0;
        }

        // SpDropdiagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public DbSet<SpHelpdiagramdefinitionReturnModel> SpHelpdiagramdefinitionReturnModel { get; set; }
        public List<SpHelpdiagramdefinitionReturnModel> SpHelpdiagramdefinition(string diagramname, int? ownerId)
        {
            int procResult;
            return SpHelpdiagramdefinition(diagramname, ownerId, out procResult);
        }

        public List<SpHelpdiagramdefinitionReturnModel> SpHelpdiagramdefinition(string diagramname, int? ownerId, out int procResult)
        {
            procResult = 0;
            return new List<SpHelpdiagramdefinitionReturnModel>();
        }

        public Task<List<SpHelpdiagramdefinitionReturnModel>> SpHelpdiagramdefinitionAsync(string diagramname, int? ownerId)
        {
            int procResult;
            return Task.FromResult(SpHelpdiagramdefinition(diagramname, ownerId, out procResult));
        }

        public DbSet<SpHelpdiagramsReturnModel> SpHelpdiagramsReturnModel { get; set; }
        public List<SpHelpdiagramsReturnModel> SpHelpdiagrams(string diagramname, int? ownerId)
        {
            int procResult;
            return SpHelpdiagrams(diagramname, ownerId, out procResult);
        }

        public List<SpHelpdiagramsReturnModel> SpHelpdiagrams(string diagramname, int? ownerId, out int procResult)
        {
            procResult = 0;
            return new List<SpHelpdiagramsReturnModel>();
        }

        public Task<List<SpHelpdiagramsReturnModel>> SpHelpdiagramsAsync(string diagramname, int? ownerId)
        {
            int procResult;
            return Task.FromResult(SpHelpdiagrams(diagramname, ownerId, out procResult));
        }

        public int SpRenamediagram(string diagramname, int? ownerId, string newDiagramname)
        {
            return 0;
        }

        // SpRenamediagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpUpgraddiagrams()
        {
            return 0;
        }

        // SpUpgraddiagramsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)
    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable<TEntity>, IAsyncEnumerable<TEntity>, IListSource where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _primaryKeys = null;
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override ValueTask<TEntity> FindAsync(object[] keyValues, CancellationToken cancellationToken)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken));
        }

        public override ValueTask<TEntity> FindAsync(params object[] keyValues)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues)));
        }

        IAsyncEnumerator<TEntity> IAsyncEnumerable<TEntity>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        public override EntityEntry<TEntity> Add(TEntity entity)
        {
            _data.Add(entity);
            return null;
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Add(entity);
        }

        public override void AddRange(IEnumerable<TEntity> entities)
        {
            AddRange(entities.ToArray());
        }

        public override Task AddRangeAsync(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override void AttachRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<TEntity> entities)
        {
            RemoveRange(entities.ToArray());
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            RemoveRange(entities);
            AddRange(entities);
        }

        public IList GetList()
        {
            return _data;
        }

        IList IListSource.GetList()
        {
            return _data;
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default(CancellationToken))
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }

    }

    public class FakeDbAsyncQueryProvider<TEntity> : IAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            var m = expression as MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>) Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken = new CancellationToken())
        {
            return _inner.Execute<TResult>(expression);
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        {
        }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        {
        }

        public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = new CancellationToken())
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }
    }

    public class FakeDbAsyncEnumerator<T> : IAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public T Current
        {
            get { return _inner.Current; }
        }
        public ValueTask<bool> MoveNextAsync()
        {
            return new ValueTask<bool>(_inner.MoveNext());
        }

        public ValueTask DisposeAsync()
        {
            _inner.Dispose();
            return new ValueTask(Task.CompletedTask);
        }
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Batch
    public class Batch
    {
        public string Id { get; set; } // Id (Primary key) (length: 50)
        public byte Status { get; set; } // Status
        public DateTime Created { get; set; } // Created
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public string Filename { get; set; } // filename (length: 200)

        // Reverse navigation

        /// <summary>
        /// Child TagBalances where [TagBalance].[BatchId] point to this entity (FK_TagBalance_Batch)
        /// </summary>
        public virtual ICollection<TagBalance> TagBalances { get; set; } // TagBalance.FK_TagBalance_Batch

        public Batch()
        {
            TagBalances = new List<TagBalance>();
        }
    }

    // Conversion
    public class Conversion
    {
        public string StandardUnit { get; set; } // StandardUnit (Primary key) (length: 10)
        public string ToUnit { get; set; } // ToUnit (Primary key) (length: 10)
        public decimal? Factor { get; set; } // Factor

        // Foreign keys

        /// <summary>
        /// Parent StandardUnit pointed by [Conversion].([StandardUnit]) (FK_Conversion_StandardUnit1)
        /// </summary>
        public virtual StandardUnit StandardUnit_StandardUnit { get; set; } // FK_Conversion_StandardUnit1

        /// <summary>
        /// Parent StandardUnit pointed by [Conversion].([ToUnit]) (FK_Conversion_StandardUnit)
        /// </summary>
        public virtual StandardUnit StandardUnit_ToUnit { get; set; } // FK_Conversion_StandardUnit
    }

    // CustodyTicket
    public class CustodyTicket
    {
        public int CustodyTicketId { get; set; } // custodyTicket_id (Primary key)
        public string S4MaterialDocument { get; set; } // S4_Material_Document (length: 50)
        public string BolNumber { get; set; } // BOL_Number (length: 50)
        public string S4Material { get; set; } // S4_Material (length: 50)
        public string SourceDataMaterialCode { get; set; } // Source_Data_Material_Code (length: 50)
        public string Sign { get; set; } // Sign (length: 50)
        public decimal GrossQuantitySize { get; set; } // Gross_Quantity_Size
        public decimal NetQuantitySize { get; set; } // Net_Quantity_Size
        public string UnitOfMeasure { get; set; } // Unit_of_Measure (length: 10)
        public string ValuationType { get; set; } // Valuation_Type (length: 10)
        public decimal Density { get; set; } // Density
        public string MovementPlant { get; set; } // Movement_Plant (length: 50)
        public string SendingPlant { get; set; } // Sending_Plant (length: 10)
        public string ReceivingPlant { get; set; } // Receiving_Plant (length: 10)
        public string Temperature { get; set; } // Temperature (length: 50)
        public string MovementType { get; set; } // Movement_Type (length: 50)
        public string Mode { get; set; } // Mode (length: 10)
        public string LoadStartDate { get; set; } // Load_Start_Date (length: 50)
        public string LoadStartTime { get; set; } // Load_Start_Time (length: 50)
        public DateTime LoadEndDateTime { get; set; } // Load_End_DateTime
        public DateTime EnteredOnDateTime { get; set; } // Entered_On_DateTime
        public string EnteredBy { get; set; } // Entered_by (length: 50)
        public DateTime DocumentDateTime { get; set; } // Document_DateTime
        public DateTime PostingDateTime { get; set; } // Posting_DateTime

        // Foreign keys

        /// <summary>
        /// Parent StandardUnit pointed by [CustodyTicket].([UnitOfMeasure]) (FK_CustodyTicket_Unit_of_Measure)
        /// </summary>
        public virtual StandardUnit StandardUnit { get; set; } // FK_CustodyTicket_Unit_of_Measure
    }

    // MaterialMovement
    public class MaterialMovement
    {
        public int MaterialMovementId { get; set; } // MaterialMovement_id (Primary key)
        public string MaterialDocument { get; set; } // materialDocument (length: 50)
        public int? Material { get; set; } // Material
        public string System { get; set; } // System (length: 50)
        public string MovementType { get; set; } // MovementType (length: 30)
        public string MovementTypeDesc { get; set; } // MovementTypeDesc (length: 800)
        public string Plant { get; set; } // Plant (length: 30)
        public string HeaderText { get; set; } // HeaderText (length: 1000)
        public string Tag { get; set; } // Tag (length: 50)
        public DateTime PostingDate { get; set; } // PostingDate
        public string ValuationType { get; set; } // ValuationType (length: 30)
        public decimal? Quantity { get; set; } // Quantity
        public string UnitOfEntry { get; set; } // UnitOfEntry (length: 10)
        public string UnitOfMeasure { get; set; } // UnitOfMeasure (length: 10)
        public decimal? QuantityInUoe { get; set; } // QuantityInUOE
        public decimal? QuantityInL15 { get; set; } // QuantityInL15
        public string BatchId { get; set; } // BatchId (length: 50)
        public DateTime EnteredOn { get; set; } // EnteredOn
        public string EnteredAt { get; set; } // EnteredAt (length: 50)

        // Foreign keys

        /// <summary>
        /// Parent StandardUnit pointed by [MaterialMovement].([UnitOfEntry]) (FK_MaterialMovement_UnitOfEntry)
        /// </summary>
        public virtual StandardUnit StandardUnit_UnitOfEntry { get; set; } // FK_MaterialMovement_UnitOfEntry

        /// <summary>
        /// Parent StandardUnit pointed by [MaterialMovement].([UnitOfMeasure]) (FK_MaterialMovement_UnitOfMeasure)
        /// </summary>
        public virtual StandardUnit StandardUnit_UnitOfMeasure { get; set; } // FK_MaterialMovement_UnitOfMeasure
    }

    // SourceUnitMap
    public class SourceUnitMap
    {
        public string Source { get; set; } // Source (Primary key) (length: 20)
        public string SourceUnit { get; set; } // SourceUnit (Primary key) (length: 20)
        public string StandardUnit { get; set; } // StandardUnit (length: 10)

        // Foreign keys

        /// <summary>
        /// Parent StandardUnit pointed by [SourceUnitMap].([StandardUnit]) (FK_StandardUnit_Name)
        /// </summary>
        public virtual StandardUnit StandardUnit_StandardUnit { get; set; } // FK_StandardUnit_Name
    }

    // StandardUnit
    public class StandardUnit
    {
        public string Name { get; set; } // Name (Primary key) (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child Conversions where [Conversion].[StandardUnit] point to this entity (FK_Conversion_StandardUnit1)
        /// </summary>
        public virtual ICollection<Conversion> Conversions_StandardUnit { get; set; } // Conversion.FK_Conversion_StandardUnit1

        /// <summary>
        /// Child Conversions where [Conversion].[ToUnit] point to this entity (FK_Conversion_StandardUnit)
        /// </summary>
        public virtual ICollection<Conversion> Conversions_ToUnit { get; set; } // Conversion.FK_Conversion_StandardUnit

        /// <summary>
        /// Child CustodyTickets where [CustodyTicket].[Unit_of_Measure] point to this entity (FK_CustodyTicket_Unit_of_Measure)
        /// </summary>
        public virtual ICollection<CustodyTicket> CustodyTickets { get; set; } // CustodyTicket.FK_CustodyTicket_Unit_of_Measure

        /// <summary>
        /// Child MaterialMovements where [MaterialMovement].[UnitOfEntry] point to this entity (FK_MaterialMovement_UnitOfEntry)
        /// </summary>
        public virtual ICollection<MaterialMovement> MaterialMovements_UnitOfEntry { get; set; } // MaterialMovement.FK_MaterialMovement_UnitOfEntry

        /// <summary>
        /// Child MaterialMovements where [MaterialMovement].[UnitOfMeasure] point to this entity (FK_MaterialMovement_UnitOfMeasure)
        /// </summary>
        public virtual ICollection<MaterialMovement> MaterialMovements_UnitOfMeasure { get; set; } // MaterialMovement.FK_MaterialMovement_UnitOfMeasure

        /// <summary>
        /// Child SourceUnitMaps where [SourceUnitMap].[StandardUnit] point to this entity (FK_StandardUnit_Name)
        /// </summary>
        public virtual ICollection<SourceUnitMap> SourceUnitMaps { get; set; } // SourceUnitMap.FK_StandardUnit_Name

        /// <summary>
        /// Child TagBalances where [TagBalance].[StandardUnit] point to this entity (FK_TagBalance_StandardUnit)
        /// </summary>
        public virtual ICollection<TagBalance> TagBalances { get; set; } // TagBalance.FK_TagBalance_StandardUnit

        /// <summary>
        /// Child TagMaps where [TagMap].[DefaultUnit] point to this entity (FK_TagMap_StandardUnit)
        /// </summary>
        public virtual ICollection<TagMap> TagMaps { get; set; } // TagMap.FK_TagMap_StandardUnit

        public StandardUnit()
        {
            Conversions_StandardUnit = new List<Conversion>();
            Conversions_ToUnit = new List<Conversion>();
            CustodyTickets = new List<CustodyTicket>();
            MaterialMovements_UnitOfEntry = new List<MaterialMovement>();
            MaterialMovements_UnitOfMeasure = new List<MaterialMovement>();
            SourceUnitMaps = new List<SourceUnitMap>();
            TagBalances = new List<TagBalance>();
            TagMaps = new List<TagMap>();
        }
    }

    // TagBalance
    public class TagBalance
    {
        public string Tag { get; set; } // Tag (Primary key) (length: 50)
        public string System { get; set; } // System (length: 50)
        public string MovementType { get; set; } // MovementType (length: 20)
        public string Material { get; set; } // Material (length: 20)
        public string Plant { get; set; } // Plant (length: 30)
        public string WorkCenter { get; set; } // WorkCenter (length: 30)
        public string ValType { get; set; } // ValType (length: 30)
        public string Tank { get; set; } // Tank (length: 30)
        public DateTime QuantityTimestamp { get; set; } // QuantityTimestamp
        public DateTime BalanceDate { get; set; } // BalanceDate (Primary key)
        public decimal? Quantity { get; set; } // Quantity
        public string StandardUnit { get; set; } // StandardUnit (length: 10)
        public string BatchId { get; set; } // BatchId (length: 50)
        public DateTime Created { get; set; } // Created
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public decimal? OpeningInventory { get; set; } // OpeningInventory
        public decimal? ClosingInventory { get; set; } // ClosingInventory
        public decimal? Shipment { get; set; } // Shipment
        public decimal? Receipt { get; set; } // Receipt

        // Foreign keys

        /// <summary>
        /// Parent Batch pointed by [TagBalance].([BatchId]) (FK_TagBalance_Batch)
        /// </summary>
        public virtual Batch Batch { get; set; } // FK_TagBalance_Batch

        /// <summary>
        /// Parent StandardUnit pointed by [TagBalance].([StandardUnit]) (FK_TagBalance_StandardUnit)
        /// </summary>
        public virtual StandardUnit StandardUnit_StandardUnit { get; set; } // FK_TagBalance_StandardUnit
    }

    // TagMap
    public class TagMap
    {
        public string Tag { get; set; } // Tag (Primary key) (length: 50)
        public string Plant { get; set; } // Plant (Primary key) (length: 4)
        public string WorkCenter { get; set; } // WorkCenter (length: 10)
        public string MaterialNumber { get; set; } // MaterialNumber (length: 20)
        public string DefaultValuationType { get; set; } // DefaultValuationType (length: 10)
        public string DefaultUnit { get; set; } // DefaultUnit (length: 10)

        // Foreign keys

        /// <summary>
        /// Parent StandardUnit pointed by [TagMap].([DefaultUnit]) (FK_TagMap_StandardUnit)
        /// </summary>
        public virtual StandardUnit StandardUnit { get; set; } // FK_TagMap_StandardUnit
    }

    // TransactionEvent
    public class TransactionEvent
    {
        public int TransactionEventId { get; set; } // TransactionEvent_id (Primary key)
        public string Plant { get; set; } // plant (length: 40)
        public string Filename { get; set; } // filename (length: 500)
        public int? FailedRecordCount { get; set; } // failedRecordCount
        public int? SuccessfulRecordCount { get; set; } // successfulRecordCount
        public string ErrorMessage { get; set; } // errorMessage (length: 1000)
        public DateTime? CreateDate { get; set; } // createDate
        public string Type { get; set; } // type (length: 20)

        // Reverse navigation

        /// <summary>
        /// Child TransactionEventDetails where [TransactionEventDetail].[TransactionEvent_id] point to this entity (FK_transactioneventdetail)
        /// </summary>
        public virtual ICollection<TransactionEventDetail> TransactionEventDetails { get; set; } // TransactionEventDetail.FK_transactioneventdetail

        public TransactionEvent()
        {
            CreateDate = DateTime.Now;
            TransactionEventDetails = new List<TransactionEventDetail>();
        }
    }

    // TransactionEventDetail
    public class TransactionEventDetail
    {
        public int TransactionEventDetailId { get; set; } // TransactionEventDetail_id (Primary key)
        public int? TransactionEventId { get; set; } // TransactionEvent_id
        public string Tag { get; set; } // tag (length: 40)
        public string ErrorMessage { get; set; } // errorMessage (length: 1000)

        // Foreign keys

        /// <summary>
        /// Parent TransactionEvent pointed by [TransactionEventDetail].([TransactionEventId]) (FK_transactioneventdetail)
        /// </summary>
        public virtual TransactionEvent TransactionEvent { get; set; } // FK_transactioneventdetail
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Batch
    public class BatchConfiguration : IEntityTypeConfiguration<Batch>
    {
        public void Configure(EntityTypeBuilder<Batch> builder)
        {
            builder.ToTable("Batch", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Batch").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.Created).HasColumnName(@"Created").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Filename).HasColumnName(@"filename").HasColumnType("varchar(200)").IsRequired(false).IsUnicode(false).HasMaxLength(200);
        }
    }

    // Conversion
    public class ConversionConfiguration : IEntityTypeConfiguration<Conversion>
    {
        public void Configure(EntityTypeBuilder<Conversion> builder)
        {
            builder.ToTable("Conversion", "dbo");
            builder.HasKey(x => new { x.StandardUnit, x.ToUnit }).HasName("PK_Conversion").IsClustered();

            builder.Property(x => x.StandardUnit).HasColumnName(@"StandardUnit").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10).ValueGeneratedNever();
            builder.Property(x => x.ToUnit).HasColumnName(@"ToUnit").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10).ValueGeneratedNever();
            builder.Property(x => x.Factor).HasColumnName(@"Factor").HasColumnType("decimal(18,8)").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.StandardUnit_StandardUnit).WithMany(b => b.Conversions_StandardUnit).HasForeignKey(c => c.StandardUnit).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Conversion_StandardUnit1");
            builder.HasOne(a => a.StandardUnit_ToUnit).WithMany(b => b.Conversions_ToUnit).HasForeignKey(c => c.ToUnit).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Conversion_StandardUnit");
        }
    }

    // CustodyTicket
    public class CustodyTicketConfiguration : IEntityTypeConfiguration<CustodyTicket>
    {
        public void Configure(EntityTypeBuilder<CustodyTicket> builder)
        {
            builder.ToTable("CustodyTicket", "dbo");
            builder.HasKey(x => x.CustodyTicketId).HasName("PK_CustodyTicket").IsClustered();

            builder.Property(x => x.CustodyTicketId).HasColumnName(@"custodyTicket_id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.S4MaterialDocument).HasColumnName(@"S4_Material_Document").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.BolNumber).HasColumnName(@"BOL_Number").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.S4Material).HasColumnName(@"S4_Material").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.SourceDataMaterialCode).HasColumnName(@"Source_Data_Material_Code").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Sign).HasColumnName(@"Sign").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.GrossQuantitySize).HasColumnName(@"Gross_Quantity_Size").HasColumnType("decimal(10,5)").IsRequired();
            builder.Property(x => x.NetQuantitySize).HasColumnName(@"Net_Quantity_Size").HasColumnType("decimal(10,5)").IsRequired();
            builder.Property(x => x.UnitOfMeasure).HasColumnName(@"Unit_of_Measure").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ValuationType).HasColumnName(@"Valuation_Type").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Density).HasColumnName(@"Density").HasColumnType("decimal(10,5)").IsRequired();
            builder.Property(x => x.MovementPlant).HasColumnName(@"Movement_Plant").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.SendingPlant).HasColumnName(@"Sending_Plant").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ReceivingPlant).HasColumnName(@"Receiving_Plant").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.Temperature).HasColumnName(@"Temperature").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.MovementType).HasColumnName(@"Movement_Type").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Mode).HasColumnName(@"Mode").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.LoadStartDate).HasColumnName(@"Load_Start_Date").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.LoadStartTime).HasColumnName(@"Load_Start_Time").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.LoadEndDateTime).HasColumnName(@"Load_End_DateTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.EnteredOnDateTime).HasColumnName(@"Entered_On_DateTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.EnteredBy).HasColumnName(@"Entered_by").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.DocumentDateTime).HasColumnName(@"Document_DateTime").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.PostingDateTime).HasColumnName(@"Posting_DateTime").HasColumnType("datetime").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.StandardUnit).WithMany(b => b.CustodyTickets).HasForeignKey(c => c.UnitOfMeasure).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_CustodyTicket_Unit_of_Measure");
        }
    }

    // MaterialMovement
    public class MaterialMovementConfiguration : IEntityTypeConfiguration<MaterialMovement>
    {
        public void Configure(EntityTypeBuilder<MaterialMovement> builder)
        {
            builder.ToTable("MaterialMovement", "dbo");
            builder.HasKey(x => x.MaterialMovementId).HasName("PK_MaterialMovement").IsClustered();

            builder.Property(x => x.MaterialMovementId).HasColumnName(@"MaterialMovement_id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.MaterialDocument).HasColumnName(@"materialDocument").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Material).HasColumnName(@"Material").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.System).HasColumnName(@"System").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.MovementType).HasColumnName(@"MovementType").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.MovementTypeDesc).HasColumnName(@"MovementTypeDesc").HasColumnType("varchar(800)").IsRequired(false).IsUnicode(false).HasMaxLength(800);
            builder.Property(x => x.Plant).HasColumnName(@"Plant").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.HeaderText).HasColumnName(@"HeaderText").HasColumnType("varchar(1000)").IsRequired(false).IsUnicode(false).HasMaxLength(1000);
            builder.Property(x => x.Tag).HasColumnName(@"Tag").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.PostingDate).HasColumnName(@"PostingDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.ValuationType).HasColumnName(@"ValuationType").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("decimal(18,4)").IsRequired(false);
            builder.Property(x => x.UnitOfEntry).HasColumnName(@"UnitOfEntry").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.UnitOfMeasure).HasColumnName(@"UnitOfMeasure").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.QuantityInUoe).HasColumnName(@"QuantityInUOE").HasColumnType("decimal(18,4)").IsRequired(false);
            builder.Property(x => x.QuantityInL15).HasColumnName(@"QuantityInL15").HasColumnType("decimal(18,4)").IsRequired(false);
            builder.Property(x => x.BatchId).HasColumnName(@"BatchId").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.EnteredOn).HasColumnName(@"EnteredOn").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.EnteredAt).HasColumnName(@"EnteredAt").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);

            // Foreign keys
            builder.HasOne(a => a.StandardUnit_UnitOfEntry).WithMany(b => b.MaterialMovements_UnitOfEntry).HasForeignKey(c => c.UnitOfEntry).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_MaterialMovement_UnitOfEntry");
            builder.HasOne(a => a.StandardUnit_UnitOfMeasure).WithMany(b => b.MaterialMovements_UnitOfMeasure).HasForeignKey(c => c.UnitOfMeasure).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_MaterialMovement_UnitOfMeasure");
        }
    }

    // SourceUnitMap
    public class SourceUnitMapConfiguration : IEntityTypeConfiguration<SourceUnitMap>
    {
        public void Configure(EntityTypeBuilder<SourceUnitMap> builder)
        {
            builder.ToTable("SourceUnitMap", "dbo");
            builder.HasKey(x => new { x.Source, x.SourceUnit }).HasName("PK_UomMap").IsClustered();

            builder.Property(x => x.Source).HasColumnName(@"Source").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20).ValueGeneratedNever();
            builder.Property(x => x.SourceUnit).HasColumnName(@"SourceUnit").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20).ValueGeneratedNever();
            builder.Property(x => x.StandardUnit).HasColumnName(@"StandardUnit").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);

            // Foreign keys
            builder.HasOne(a => a.StandardUnit_StandardUnit).WithMany(b => b.SourceUnitMaps).HasForeignKey(c => c.StandardUnit).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_StandardUnit_Name");
        }
    }

    // StandardUnit
    public class StandardUnitConfiguration : IEntityTypeConfiguration<StandardUnit>
    {
        public void Configure(EntityTypeBuilder<StandardUnit> builder)
        {
            builder.ToTable("StandardUnit", "dbo");
            builder.HasKey(x => x.Name).HasName("PK_StandardUnit").IsClustered();

            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10).ValueGeneratedNever();
        }
    }

    // TagBalance
    public class TagBalanceConfiguration : IEntityTypeConfiguration<TagBalance>
    {
        public void Configure(EntityTypeBuilder<TagBalance> builder)
        {
            builder.ToTable("TagBalance", "dbo");
            builder.HasKey(x => new { x.Tag, x.BalanceDate }).HasName("PK_TagBalance").IsClustered();

            builder.Property(x => x.Tag).HasColumnName(@"Tag").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.System).HasColumnName(@"System").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.MovementType).HasColumnName(@"MovementType").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Material).HasColumnName(@"Material").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Plant).HasColumnName(@"Plant").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.WorkCenter).HasColumnName(@"WorkCenter").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.ValType).HasColumnName(@"ValType").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.Tank).HasColumnName(@"Tank").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.QuantityTimestamp).HasColumnName(@"QuantityTimestamp").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.BalanceDate).HasColumnName(@"BalanceDate").HasColumnType("datetime").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("decimal(18,4)").IsRequired(false);
            builder.Property(x => x.StandardUnit).HasColumnName(@"StandardUnit").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.BatchId).HasColumnName(@"BatchId").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Created).HasColumnName(@"Created").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.OpeningInventory).HasColumnName(@"OpeningInventory").HasColumnType("decimal(18,4)").IsRequired(false);
            builder.Property(x => x.ClosingInventory).HasColumnName(@"ClosingInventory").HasColumnType("decimal(18,4)").IsRequired(false);
            builder.Property(x => x.Shipment).HasColumnName(@"Shipment").HasColumnType("decimal(18,4)").IsRequired(false);
            builder.Property(x => x.Receipt).HasColumnName(@"Receipt").HasColumnType("decimal(18,4)").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Batch).WithMany(b => b.TagBalances).HasForeignKey(c => c.BatchId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TagBalance_Batch");
            builder.HasOne(a => a.StandardUnit_StandardUnit).WithMany(b => b.TagBalances).HasForeignKey(c => c.StandardUnit).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TagBalance_StandardUnit");
        }
    }

    // TagMap
    public class TagMapConfiguration : IEntityTypeConfiguration<TagMap>
    {
        public void Configure(EntityTypeBuilder<TagMap> builder)
        {
            builder.ToTable("TagMap", "dbo");
            builder.HasKey(x => new { x.Tag, x.Plant }).HasName("PK_TagMap").IsClustered();

            builder.Property(x => x.Tag).HasColumnName(@"Tag").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.Plant).HasColumnName(@"Plant").HasColumnType("varchar(4)").IsRequired().IsUnicode(false).HasMaxLength(4).ValueGeneratedNever();
            builder.Property(x => x.WorkCenter).HasColumnName(@"WorkCenter").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.MaterialNumber).HasColumnName(@"MaterialNumber").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.DefaultValuationType).HasColumnName(@"DefaultValuationType").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.DefaultUnit).HasColumnName(@"DefaultUnit").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);

            // Foreign keys
            builder.HasOne(a => a.StandardUnit).WithMany(b => b.TagMaps).HasForeignKey(c => c.DefaultUnit).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TagMap_StandardUnit");
        }
    }

    // TransactionEvent
    public class TransactionEventConfiguration : IEntityTypeConfiguration<TransactionEvent>
    {
        public void Configure(EntityTypeBuilder<TransactionEvent> builder)
        {
            builder.ToTable("TransactionEvent", "dbo");
            builder.HasKey(x => x.TransactionEventId).HasName("PK_TransactionEvent").IsClustered();

            builder.Property(x => x.TransactionEventId).HasColumnName(@"TransactionEvent_id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Plant).HasColumnName(@"plant").HasColumnType("varchar(40)").IsRequired(false).IsUnicode(false).HasMaxLength(40);
            builder.Property(x => x.Filename).HasColumnName(@"filename").HasColumnType("varchar(500)").IsRequired(false).IsUnicode(false).HasMaxLength(500);
            builder.Property(x => x.FailedRecordCount).HasColumnName(@"failedRecordCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SuccessfulRecordCount).HasColumnName(@"successfulRecordCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ErrorMessage).HasColumnName(@"errorMessage").HasColumnType("varchar(1000)").IsRequired(false).IsUnicode(false).HasMaxLength(1000);
            builder.Property(x => x.CreateDate).HasColumnName(@"createDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Type).HasColumnName(@"type").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
        }
    }

    // TransactionEventDetail
    public class TransactionEventDetailConfiguration : IEntityTypeConfiguration<TransactionEventDetail>
    {
        public void Configure(EntityTypeBuilder<TransactionEventDetail> builder)
        {
            builder.ToTable("TransactionEventDetail", "dbo");
            builder.HasKey(x => x.TransactionEventDetailId).HasName("PK_TransactionEventDetail").IsClustered();

            builder.Property(x => x.TransactionEventDetailId).HasColumnName(@"TransactionEventDetail_id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TransactionEventId).HasColumnName(@"TransactionEvent_id").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Tag).HasColumnName(@"tag").HasColumnType("varchar(40)").IsRequired(false).IsUnicode(false).HasMaxLength(40);
            builder.Property(x => x.ErrorMessage).HasColumnName(@"errorMessage").HasColumnType("varchar(1000)").IsRequired(false).IsUnicode(false).HasMaxLength(1000);

            // Foreign keys
            builder.HasOne(a => a.TransactionEvent).WithMany(b => b.TransactionEventDetails).HasForeignKey(c => c.TransactionEventId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_transactioneventdetail");
        }
    }


    #endregion

    #region Stored procedure return models

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class SpHelpdiagramdefinitionReturnModel
    {
        public int? version { get; set; }
        public byte[] definition { get; set; }
    }

    public class SpHelpdiagramsReturnModel
    {
        public string Database { get; set; }
        public string Name { get; set; }
        public int ID { get; set; }
        public string Owner { get; set; }
        public int OwnerID { get; set; }
    }


    #endregion

}
// </auto-generated>
