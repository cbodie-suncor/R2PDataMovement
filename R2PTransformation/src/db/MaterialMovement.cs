// Licence file C:\Users\cbodie\Documents\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query.Internal;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace R2PTransformation.src.db
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IMyDbContext : IDisposable
    {
        DbSet<Batch> Batches { get; set; } // Batch
        DbSet<Conversion> Conversions { get; set; } // Conversion
        DbSet<Sigmafinex> Sigmafinexes { get; set; } // sigmafinex
        DbSet<SourceUnitMap> SourceUnitMaps { get; set; } // SourceUnitMap
        DbSet<StandardUnit> StandardUnits { get; set; } // StandardUnit
        DbSet<SuncorTransaction> SuncorTransactions { get; set; } // SuncorTransactions
        DbSet<TagBalance> TagBalances { get; set; } // TagBalance
        DbSet<TagMap> TagMaps { get; set; } // TagMap
        DbSet<TransactionEvent> TransactionEvents { get; set; } // TransactionEvent
        DbSet<TransactionEventDetail> TransactionEventDetails { get; set; } // TransactionEventDetail

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class MyDbContext : DbContext, IMyDbContext
    {
        public MyDbContext()
        {
        }

        public MyDbContext(DbContextOptions<MyDbContext> options)
            : base(options)
        {
        }

        public DbSet<Batch> Batches { get; set; } // Batch
        public DbSet<Conversion> Conversions { get; set; } // Conversion
        public DbSet<Sigmafinex> Sigmafinexes { get; set; } // sigmafinex
        public DbSet<SourceUnitMap> SourceUnitMaps { get; set; } // SourceUnitMap
        public DbSet<StandardUnit> StandardUnits { get; set; } // StandardUnit
        public DbSet<SuncorTransaction> SuncorTransactions { get; set; } // SuncorTransactions
        public DbSet<TagBalance> TagBalances { get; set; } // TagBalance
        public DbSet<TagMap> TagMaps { get; set; } // TagMap
        public DbSet<TransactionEvent> TransactionEvents { get; set; } // TransactionEvent
        public DbSet<TransactionEventDetail> TransactionEventDetails { get; set; } // TransactionEventDetail

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Data Source=(local);Initial Catalog=suncor;Integrated Security=True;MultipleActiveResultSets=True");
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new BatchConfiguration());
            modelBuilder.ApplyConfiguration(new ConversionConfiguration());
            modelBuilder.ApplyConfiguration(new SigmafinexConfiguration());
            modelBuilder.ApplyConfiguration(new SourceUnitMapConfiguration());
            modelBuilder.ApplyConfiguration(new StandardUnitConfiguration());
            modelBuilder.ApplyConfiguration(new SuncorTransactionConfiguration());
            modelBuilder.ApplyConfiguration(new TagBalanceConfiguration());
            modelBuilder.ApplyConfiguration(new TagMapConfiguration());
            modelBuilder.ApplyConfiguration(new TransactionEventConfiguration());
            modelBuilder.ApplyConfiguration(new TransactionEventDetailConfiguration());
        }

    }

    #endregion

    #region Database context factory

    public class MyDbContextFactory : IDesignTimeDbContextFactory<MyDbContext>
    {
        public MyDbContext CreateDbContext(string[] args)
        {
            return new MyDbContext();
        }
    }

    #endregion

    #region Fake Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeMyDbContext : IMyDbContext
    {
        public DbSet<Batch> Batches { get; set; } // Batch
        public DbSet<Conversion> Conversions { get; set; } // Conversion
        public DbSet<Sigmafinex> Sigmafinexes { get; set; } // sigmafinex
        public DbSet<SourceUnitMap> SourceUnitMaps { get; set; } // SourceUnitMap
        public DbSet<StandardUnit> StandardUnits { get; set; } // StandardUnit
        public DbSet<SuncorTransaction> SuncorTransactions { get; set; } // SuncorTransactions
        public DbSet<TagBalance> TagBalances { get; set; } // TagBalance
        public DbSet<TagMap> TagMaps { get; set; } // TagMap
        public DbSet<TransactionEvent> TransactionEvents { get; set; } // TransactionEvent
        public DbSet<TransactionEventDetail> TransactionEventDetails { get; set; } // TransactionEventDetail

        public FakeMyDbContext()
        {
            _database = null;

            Batches = new FakeDbSet<Batch>("Id");
            Conversions = new FakeDbSet<Conversion>("StandardUnit", "ToUnit");
            Sigmafinexes = new FakeDbSet<Sigmafinex>("SigmafinexId");
            SourceUnitMaps = new FakeDbSet<SourceUnitMap>("Source", "SourceUnit");
            StandardUnits = new FakeDbSet<StandardUnit>("Name");
            SuncorTransactions = new FakeDbSet<SuncorTransaction>("TransactionsId");
            TagBalances = new FakeDbSet<TagBalance>("Tag", "BalanceDate");
            TagMaps = new FakeDbSet<TagMap>("Tag", "Plant");
            TransactionEvents = new FakeDbSet<TransactionEvent>("TransactionEventId");
            TransactionEventDetails = new FakeDbSet<TransactionEventDetail>("TransactionEventDetailId");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }
    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable<TEntity>, IAsyncEnumerable<TEntity>, IListSource where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _primaryKeys = null;
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override ValueTask<TEntity> FindAsync(object[] keyValues, CancellationToken cancellationToken)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken));
        }

        public override ValueTask<TEntity> FindAsync(params object[] keyValues)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues)));
        }

        IAsyncEnumerator<TEntity> IAsyncEnumerable<TEntity>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        public override EntityEntry<TEntity> Add(TEntity entity)
        {
            _data.Add(entity);
            return null;
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Add(entity);
        }

        public override void AddRange(IEnumerable<TEntity> entities)
        {
            AddRange(entities.ToArray());
        }

        public override Task AddRangeAsync(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override void AttachRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<TEntity> entities)
        {
            RemoveRange(entities.ToArray());
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            RemoveRange(entities);
            AddRange(entities);
        }

        public IList GetList()
        {
            return _data;
        }

        IList IListSource.GetList()
        {
            return _data;
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default(CancellationToken))
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }

    }

    public class FakeDbAsyncQueryProvider<TEntity> : IAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            var m = expression as MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>) Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken = new CancellationToken())
        {
            return _inner.Execute<TResult>(expression);
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        {
        }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        {
        }

        public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = new CancellationToken())
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }
    }

    public class FakeDbAsyncEnumerator<T> : IAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public T Current
        {
            get { return _inner.Current; }
        }
        public ValueTask<bool> MoveNextAsync()
        {
            return new ValueTask<bool>(_inner.MoveNext());
        }

        public ValueTask DisposeAsync()
        {
            _inner.Dispose();
            return new ValueTask(Task.CompletedTask);
        }
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Batch
    public class Batch
    {
        public string Id { get; set; } // Id (Primary key) (length: 50)
        public byte Status { get; set; } // Status
        public DateTime Created { get; set; } // Created
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public string Filename { get; set; } // filename (length: 200)

        // Reverse navigation

        /// <summary>
        /// Child TagBalances where [TagBalance].[BatchId] point to this entity (FK_TagBalance_Batch)
        /// </summary>
        public virtual ICollection<TagBalance> TagBalances { get; set; } // TagBalance.FK_TagBalance_Batch

        public Batch()
        {
            TagBalances = new List<TagBalance>();
        }
    }

    // Conversion
    public class Conversion
    {
        public string StandardUnit { get; set; } // StandardUnit (Primary key) (length: 10)
        public string ToUnit { get; set; } // ToUnit (Primary key) (length: 10)
        public decimal? Factor { get; set; } // Factor

        // Foreign keys

        /// <summary>
        /// Parent StandardUnit pointed by [Conversion].([StandardUnit]) (FK_Conversion_StandardUnit1)
        /// </summary>
        public virtual StandardUnit StandardUnit_StandardUnit { get; set; } // FK_Conversion_StandardUnit1

        /// <summary>
        /// Parent StandardUnit pointed by [Conversion].([ToUnit]) (FK_Conversion_StandardUnit)
        /// </summary>
        public virtual StandardUnit StandardUnit_ToUnit { get; set; } // FK_Conversion_StandardUnit
    }

    // sigmafinex
    public class Sigmafinex
    {
        public DateTime? StartTime { get; set; } // StartTime
        public DateTime? EndTime { get; set; } // EndTime
        public string FlowId { get; set; } // FlowID (length: 100)
        public string FlowMeter { get; set; } // FlowMeter (length: 100)
        public string FlowType { get; set; } // FlowType (length: 100)
        public string RecShipId { get; set; } // RecShipID (length: 100)
        public string InService { get; set; } // InService (length: 100)
        public decimal? MeasMass { get; set; } // MeasMass
        public decimal? MeasLiqVol { get; set; } // MeasLiqVol
        public decimal? MeasGasVol { get; set; } // MeasGasVol
        public decimal? MeasGasLiqVol { get; set; } // MeasGasLiqVol
        public decimal? RecMass { get; set; } // RecMass
        public decimal? RecLiqVol { get; set; } // RecLiqVol
        public decimal? RecGasVol { get; set; } // RecGasVol
        public decimal? RecGasLiqVol { get; set; } // RecGasLiqVol
        public decimal? ProductDensity { get; set; } // ProductDensity
        public decimal? ProductMolecularWeight { get; set; } // ProductMolecularWeight
        public decimal? LiquidDensity { get; set; } // LiquidDensity
        public decimal? GasMolecularWeight { get; set; } // GasMolecularWeight
        public string Product { get; set; } // Product (length: 100)
        public string ProductDesc { get; set; } // ProductDesc (length: 100)
        public string ProductCategory { get; set; } // ProductCategory (length: 100)
        public string ProductFamily { get; set; } // ProductFamily (length: 100)
        public string ProductGroup { get; set; } // ProductGroup (length: 100)
        public string ProductSortIndex { get; set; } // ProductSortIndex (length: 100)
        public string TrackingGroup { get; set; } // TrackingGroup (length: 100)
        public string PhysicalState { get; set; } // PhysicalState (length: 100)
        public string IsCharge { get; set; } // IsCharge (length: 100)
        public string RecShipSrc { get; set; } // RecShipSrc (length: 100)
        public string RecShipDest { get; set; } // RecShipDest (length: 100)
        public string SourceCc { get; set; } // SourceCC (length: 100)
        public string DestinationCc { get; set; } // DestinationCC (length: 100)
        public string FlowCc { get; set; } // FlowCC (length: 100)
        public decimal? TankOpenVol { get; set; } // TankOpenVol
        public decimal? TankOpenMass { get; set; } // TankOpenMass
        public decimal? TankCloseVol { get; set; } // TankCloseVol
        public decimal? TankCloseMass { get; set; } // TankCloseMass
        public string TankStatus { get; set; } // TankStatus (length: 100)
        public decimal? TankDensity { get; set; } // TankDensity
        public decimal? TankCloseRecMass { get; set; } // TankCloseRecMass
        public decimal? TankCloseRecVol { get; set; } // TankCloseRecVol
        public string OpenFlag { get; set; } // OpenFlag (length: 100)
        public string CloseFlag { get; set; } // CloseFlag (length: 100)
        public int SigmafinexId { get; set; } // sigmafinex_id (Primary key)
    }

    // SourceUnitMap
    public class SourceUnitMap
    {
        public string Source { get; set; } // Source (Primary key) (length: 20)
        public string SourceUnit { get; set; } // SourceUnit (Primary key) (length: 20)
        public string StandardUnit { get; set; } // StandardUnit (length: 10)

        // Foreign keys

        /// <summary>
        /// Parent StandardUnit pointed by [SourceUnitMap].([StandardUnit]) (FK_StandardUnit_Name)
        /// </summary>
        public virtual StandardUnit StandardUnit_StandardUnit { get; set; } // FK_StandardUnit_Name
    }

    // StandardUnit
    public class StandardUnit
    {
        public string Name { get; set; } // Name (Primary key) (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child Conversions where [Conversion].[StandardUnit] point to this entity (FK_Conversion_StandardUnit1)
        /// </summary>
        public virtual ICollection<Conversion> Conversions_StandardUnit { get; set; } // Conversion.FK_Conversion_StandardUnit1

        /// <summary>
        /// Child Conversions where [Conversion].[ToUnit] point to this entity (FK_Conversion_StandardUnit)
        /// </summary>
        public virtual ICollection<Conversion> Conversions_ToUnit { get; set; } // Conversion.FK_Conversion_StandardUnit

        /// <summary>
        /// Child SourceUnitMaps where [SourceUnitMap].[StandardUnit] point to this entity (FK_StandardUnit_Name)
        /// </summary>
        public virtual ICollection<SourceUnitMap> SourceUnitMaps { get; set; } // SourceUnitMap.FK_StandardUnit_Name

        /// <summary>
        /// Child TagBalances where [TagBalance].[StandardUnit] point to this entity (FK_TagBalance_StandardUnit)
        /// </summary>
        public virtual ICollection<TagBalance> TagBalances { get; set; } // TagBalance.FK_TagBalance_StandardUnit

        /// <summary>
        /// Child TagMaps where [TagMap].[DefaultUnit] point to this entity (FK_TagMap_StandardUnit)
        /// </summary>
        public virtual ICollection<TagMap> TagMaps { get; set; } // TagMap.FK_TagMap_StandardUnit

        public StandardUnit()
        {
            Conversions_StandardUnit = new List<Conversion>();
            Conversions_ToUnit = new List<Conversion>();
            SourceUnitMaps = new List<SourceUnitMap>();
            TagBalances = new List<TagBalance>();
            TagMaps = new List<TagMap>();
        }
    }

    // SuncorTransactions
    public class SuncorTransaction
    {
        public int TransactionsId { get; set; } // transactions_id (Primary key)
    }

    // TagBalance
    public class TagBalance
    {
        public string Tag { get; set; } // Tag (Primary key) (length: 50)
        public string System { get; set; } // System (length: 50)
        public string MovementType { get; set; } // MovementType (length: 20)
        public string Material { get; set; } // Material (length: 20)
        public string Plant { get; set; } // Plant (length: 30)
        public string WorkCenter { get; set; } // WorkCenter (length: 30)
        public string ValType { get; set; } // ValType (length: 30)
        public string Tank { get; set; } // Tank (length: 30)
        public DateTime QuantityTimestamp { get; set; } // QuantityTimestamp
        public DateTime BalanceDate { get; set; } // BalanceDate (Primary key)
        public decimal? Quantity { get; set; } // Quantity
        public string StandardUnit { get; set; } // StandardUnit (length: 10)
        public string BatchId { get; set; } // BatchId (length: 50)
        public DateTime Created { get; set; } // Created
        public string CreatedBy { get; set; } // CreatedBy (length: 50)

        // Foreign keys

        /// <summary>
        /// Parent Batch pointed by [TagBalance].([BatchId]) (FK_TagBalance_Batch)
        /// </summary>
        public virtual Batch Batch { get; set; } // FK_TagBalance_Batch

        /// <summary>
        /// Parent StandardUnit pointed by [TagBalance].([StandardUnit]) (FK_TagBalance_StandardUnit)
        /// </summary>
        public virtual StandardUnit StandardUnit_StandardUnit { get; set; } // FK_TagBalance_StandardUnit
    }

    // TagMap
    public class TagMap
    {
        public string Tag { get; set; } // Tag (Primary key) (length: 50)
        public string Plant { get; set; } // Plant (Primary key) (length: 4)
        public string WorkCenter { get; set; } // WorkCenter (length: 10)
        public string MaterialNumber { get; set; } // MaterialNumber (length: 20)
        public string DefaultValuationType { get; set; } // DefaultValuationType (length: 10)
        public string DefaultUnit { get; set; } // DefaultUnit (length: 10)

        // Foreign keys

        /// <summary>
        /// Parent StandardUnit pointed by [TagMap].([DefaultUnit]) (FK_TagMap_StandardUnit)
        /// </summary>
        public virtual StandardUnit StandardUnit { get; set; } // FK_TagMap_StandardUnit
    }

    // TransactionEvent
    public class TransactionEvent
    {
        public int TransactionEventId { get; set; } // TransactionEvent_id (Primary key)
        public string Plant { get; set; } // plant (length: 40)
        public string Filename { get; set; } // filename (length: 500)
        public int? FailedRecordCount { get; set; } // failedRecordCount
        public int? SuccessfulRecordCount { get; set; } // successfulRecordCount
        public string ErrorMessage { get; set; } // errorMessage (length: 1000)
        public DateTime? CreateDate { get; set; } // createDate

        // Reverse navigation

        /// <summary>
        /// Child TransactionEventDetails where [TransactionEventDetail].[TransactionEvent_id] point to this entity (FK_transactioneventdetail)
        /// </summary>
        public virtual ICollection<TransactionEventDetail> TransactionEventDetails { get; set; } // TransactionEventDetail.FK_transactioneventdetail

        public TransactionEvent()
        {
            CreateDate = DateTime.Now;
            TransactionEventDetails = new List<TransactionEventDetail>();
        }
    }

    // TransactionEventDetail
    public class TransactionEventDetail
    {
        public int TransactionEventDetailId { get; set; } // TransactionEventDetail_id (Primary key)
        public int? TransactionEventId { get; set; } // TransactionEvent_id
        public string Tag { get; set; } // tag (length: 40)
        public string ErrorMessage { get; set; } // errorMessage (length: 1000)

        // Foreign keys

        /// <summary>
        /// Parent TransactionEvent pointed by [TransactionEventDetail].([TransactionEventId]) (FK_transactioneventdetail)
        /// </summary>
        public virtual TransactionEvent TransactionEvent { get; set; } // FK_transactioneventdetail
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Batch
    public class BatchConfiguration : IEntityTypeConfiguration<Batch>
    {
        public void Configure(EntityTypeBuilder<Batch> builder)
        {
            builder.ToTable("Batch", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Batch").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.Created).HasColumnName(@"Created").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Filename).HasColumnName(@"filename").HasColumnType("varchar(200)").IsRequired(false).IsUnicode(false).HasMaxLength(200);
        }
    }

    // Conversion
    public class ConversionConfiguration : IEntityTypeConfiguration<Conversion>
    {
        public void Configure(EntityTypeBuilder<Conversion> builder)
        {
            builder.ToTable("Conversion", "dbo");
            builder.HasKey(x => new { x.StandardUnit, x.ToUnit }).HasName("PK_Conversion").IsClustered();

            builder.Property(x => x.StandardUnit).HasColumnName(@"StandardUnit").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10).ValueGeneratedNever();
            builder.Property(x => x.ToUnit).HasColumnName(@"ToUnit").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10).ValueGeneratedNever();
            builder.Property(x => x.Factor).HasColumnName(@"Factor").HasColumnType("decimal(18,8)").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.StandardUnit_StandardUnit).WithMany(b => b.Conversions_StandardUnit).HasForeignKey(c => c.StandardUnit).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Conversion_StandardUnit1");
            builder.HasOne(a => a.StandardUnit_ToUnit).WithMany(b => b.Conversions_ToUnit).HasForeignKey(c => c.ToUnit).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Conversion_StandardUnit");
        }
    }

    // sigmafinex
    public class SigmafinexConfiguration : IEntityTypeConfiguration<Sigmafinex>
    {
        public void Configure(EntityTypeBuilder<Sigmafinex> builder)
        {
            builder.ToTable("sigmafinex", "dbo");
            builder.HasKey(x => x.SigmafinexId).HasName("PK__sigmafin__4567000B0EB60197").IsClustered();

            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.FlowId).HasColumnName(@"FlowID").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.FlowMeter).HasColumnName(@"FlowMeter").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.FlowType).HasColumnName(@"FlowType").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.RecShipId).HasColumnName(@"RecShipID").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.InService).HasColumnName(@"InService").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.MeasMass).HasColumnName(@"MeasMass").HasColumnType("decimal(20,5)").IsRequired(false);
            builder.Property(x => x.MeasLiqVol).HasColumnName(@"MeasLiqVol").HasColumnType("decimal(20,5)").IsRequired(false);
            builder.Property(x => x.MeasGasVol).HasColumnName(@"MeasGasVol").HasColumnType("decimal(20,5)").IsRequired(false);
            builder.Property(x => x.MeasGasLiqVol).HasColumnName(@"MeasGasLiqVol").HasColumnType("decimal(20,5)").IsRequired(false);
            builder.Property(x => x.RecMass).HasColumnName(@"RecMass").HasColumnType("decimal(20,5)").IsRequired(false);
            builder.Property(x => x.RecLiqVol).HasColumnName(@"RecLiqVol").HasColumnType("decimal(20,5)").IsRequired(false);
            builder.Property(x => x.RecGasVol).HasColumnName(@"RecGasVol").HasColumnType("decimal(20,5)").IsRequired(false);
            builder.Property(x => x.RecGasLiqVol).HasColumnName(@"RecGasLiqVol").HasColumnType("decimal(20,5)").IsRequired(false);
            builder.Property(x => x.ProductDensity).HasColumnName(@"ProductDensity").HasColumnType("decimal(20,5)").IsRequired(false);
            builder.Property(x => x.ProductMolecularWeight).HasColumnName(@"ProductMolecularWeight").HasColumnType("decimal(20,5)").IsRequired(false);
            builder.Property(x => x.LiquidDensity).HasColumnName(@"LiquidDensity").HasColumnType("decimal(20,5)").IsRequired(false);
            builder.Property(x => x.GasMolecularWeight).HasColumnName(@"GasMolecularWeight").HasColumnType("decimal(20,5)").IsRequired(false);
            builder.Property(x => x.Product).HasColumnName(@"Product").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductDesc).HasColumnName(@"ProductDesc").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductCategory).HasColumnName(@"ProductCategory").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductFamily).HasColumnName(@"ProductFamily").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductGroup).HasColumnName(@"ProductGroup").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.ProductSortIndex).HasColumnName(@"ProductSortIndex").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.TrackingGroup).HasColumnName(@"TrackingGroup").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.PhysicalState).HasColumnName(@"PhysicalState").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.IsCharge).HasColumnName(@"IsCharge").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.RecShipSrc).HasColumnName(@"RecShipSrc").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.RecShipDest).HasColumnName(@"RecShipDest").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.SourceCc).HasColumnName(@"SourceCC").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.DestinationCc).HasColumnName(@"DestinationCC").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.FlowCc).HasColumnName(@"FlowCC").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.TankOpenVol).HasColumnName(@"TankOpenVol").HasColumnType("decimal(20,5)").IsRequired(false);
            builder.Property(x => x.TankOpenMass).HasColumnName(@"TankOpenMass").HasColumnType("decimal(20,5)").IsRequired(false);
            builder.Property(x => x.TankCloseVol).HasColumnName(@"TankCloseVol").HasColumnType("decimal(20,5)").IsRequired(false);
            builder.Property(x => x.TankCloseMass).HasColumnName(@"TankCloseMass").HasColumnType("decimal(20,5)").IsRequired(false);
            builder.Property(x => x.TankStatus).HasColumnName(@"TankStatus").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.TankDensity).HasColumnName(@"TankDensity").HasColumnType("decimal(20,5)").IsRequired(false);
            builder.Property(x => x.TankCloseRecMass).HasColumnName(@"TankCloseRecMass").HasColumnType("decimal(20,5)").IsRequired(false);
            builder.Property(x => x.TankCloseRecVol).HasColumnName(@"TankCloseRecVol").HasColumnType("decimal(20,5)").IsRequired(false);
            builder.Property(x => x.OpenFlag).HasColumnName(@"OpenFlag").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.CloseFlag).HasColumnName(@"CloseFlag").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.SigmafinexId).HasColumnName(@"sigmafinex_id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // SourceUnitMap
    public class SourceUnitMapConfiguration : IEntityTypeConfiguration<SourceUnitMap>
    {
        public void Configure(EntityTypeBuilder<SourceUnitMap> builder)
        {
            builder.ToTable("SourceUnitMap", "dbo");
            builder.HasKey(x => new { x.Source, x.SourceUnit }).HasName("PK_UomMap").IsClustered();

            builder.Property(x => x.Source).HasColumnName(@"Source").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20).ValueGeneratedNever();
            builder.Property(x => x.SourceUnit).HasColumnName(@"SourceUnit").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20).ValueGeneratedNever();
            builder.Property(x => x.StandardUnit).HasColumnName(@"StandardUnit").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);

            // Foreign keys
            builder.HasOne(a => a.StandardUnit_StandardUnit).WithMany(b => b.SourceUnitMaps).HasForeignKey(c => c.StandardUnit).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_StandardUnit_Name");
        }
    }

    // StandardUnit
    public class StandardUnitConfiguration : IEntityTypeConfiguration<StandardUnit>
    {
        public void Configure(EntityTypeBuilder<StandardUnit> builder)
        {
            builder.ToTable("StandardUnit", "dbo");
            builder.HasKey(x => x.Name).HasName("PK_StandardUnit").IsClustered();

            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10).ValueGeneratedNever();
        }
    }

    // SuncorTransactions
    public class SuncorTransactionConfiguration : IEntityTypeConfiguration<SuncorTransaction>
    {
        public void Configure(EntityTypeBuilder<SuncorTransaction> builder)
        {
            builder.ToTable("SuncorTransactions", "dbo");
            builder.HasKey(x => x.TransactionsId);

            builder.Property(x => x.TransactionsId).HasColumnName(@"transactions_id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // TagBalance
    public class TagBalanceConfiguration : IEntityTypeConfiguration<TagBalance>
    {
        public void Configure(EntityTypeBuilder<TagBalance> builder)
        {
            builder.ToTable("TagBalance", "dbo");
            builder.HasKey(x => new { x.Tag, x.BalanceDate }).HasName("PK_TagBalance").IsClustered();

            builder.Property(x => x.Tag).HasColumnName(@"Tag").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.System).HasColumnName(@"System").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.MovementType).HasColumnName(@"MovementType").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Material).HasColumnName(@"Material").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Plant).HasColumnName(@"Plant").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.WorkCenter).HasColumnName(@"WorkCenter").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.ValType).HasColumnName(@"ValType").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.Tank).HasColumnName(@"Tank").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.QuantityTimestamp).HasColumnName(@"QuantityTimestamp").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.BalanceDate).HasColumnName(@"BalanceDate").HasColumnType("datetime").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("decimal(18,4)").IsRequired(false);
            builder.Property(x => x.StandardUnit).HasColumnName(@"StandardUnit").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.BatchId).HasColumnName(@"BatchId").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Created).HasColumnName(@"Created").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);

            // Foreign keys
            builder.HasOne(a => a.Batch).WithMany(b => b.TagBalances).HasForeignKey(c => c.BatchId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TagBalance_Batch");
            builder.HasOne(a => a.StandardUnit_StandardUnit).WithMany(b => b.TagBalances).HasForeignKey(c => c.StandardUnit).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TagBalance_StandardUnit");
        }
    }

    // TagMap
    public class TagMapConfiguration : IEntityTypeConfiguration<TagMap>
    {
        public void Configure(EntityTypeBuilder<TagMap> builder)
        {
            builder.ToTable("TagMap", "dbo");
            builder.HasKey(x => new { x.Tag, x.Plant }).HasName("PK_TagMap").IsClustered();

            builder.Property(x => x.Tag).HasColumnName(@"Tag").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.Plant).HasColumnName(@"Plant").HasColumnType("varchar(4)").IsRequired().IsUnicode(false).HasMaxLength(4).ValueGeneratedNever();
            builder.Property(x => x.WorkCenter).HasColumnName(@"WorkCenter").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.MaterialNumber).HasColumnName(@"MaterialNumber").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.DefaultValuationType).HasColumnName(@"DefaultValuationType").HasColumnType("varchar(10)").IsRequired().IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.DefaultUnit).HasColumnName(@"DefaultUnit").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);

            // Foreign keys
            builder.HasOne(a => a.StandardUnit).WithMany(b => b.TagMaps).HasForeignKey(c => c.DefaultUnit).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TagMap_StandardUnit");
        }
    }

    // TransactionEvent
    public class TransactionEventConfiguration : IEntityTypeConfiguration<TransactionEvent>
    {
        public void Configure(EntityTypeBuilder<TransactionEvent> builder)
        {
            builder.ToTable("TransactionEvent", "dbo");
            builder.HasKey(x => x.TransactionEventId).HasName("PK_TransactionEvent").IsClustered();

            builder.Property(x => x.TransactionEventId).HasColumnName(@"TransactionEvent_id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Plant).HasColumnName(@"plant").HasColumnType("varchar(40)").IsRequired(false).IsUnicode(false).HasMaxLength(40);
            builder.Property(x => x.Filename).HasColumnName(@"filename").HasColumnType("varchar(500)").IsRequired(false).IsUnicode(false).HasMaxLength(500);
            builder.Property(x => x.FailedRecordCount).HasColumnName(@"failedRecordCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SuccessfulRecordCount).HasColumnName(@"successfulRecordCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ErrorMessage).HasColumnName(@"errorMessage").HasColumnType("varchar(1000)").IsRequired(false).IsUnicode(false).HasMaxLength(1000);
            builder.Property(x => x.CreateDate).HasColumnName(@"createDate").HasColumnType("datetime").IsRequired(false);
        }
    }

    // TransactionEventDetail
    public class TransactionEventDetailConfiguration : IEntityTypeConfiguration<TransactionEventDetail>
    {
        public void Configure(EntityTypeBuilder<TransactionEventDetail> builder)
        {
            builder.ToTable("TransactionEventDetail", "dbo");
            builder.HasKey(x => x.TransactionEventDetailId).HasName("PK_TransactionEventDetail").IsClustered();

            builder.Property(x => x.TransactionEventDetailId).HasColumnName(@"TransactionEventDetail_id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TransactionEventId).HasColumnName(@"TransactionEvent_id").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Tag).HasColumnName(@"tag").HasColumnType("varchar(40)").IsRequired(false).IsUnicode(false).HasMaxLength(40);
            builder.Property(x => x.ErrorMessage).HasColumnName(@"errorMessage").HasColumnType("varchar(1000)").IsRequired(false).IsUnicode(false).HasMaxLength(1000);

            // Foreign keys
            builder.HasOne(a => a.TransactionEvent).WithMany(b => b.TransactionEventDetails).HasForeignKey(c => c.TransactionEventId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_transactioneventdetail");
        }
    }


    #endregion

}
// </auto-generated>
